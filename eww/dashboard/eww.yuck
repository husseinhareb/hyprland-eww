;; ** Variables ***********************************************************************

;; Time vars
(defpoll HOUR :interval "1s" `date +\"%I\"`)
(defpoll MINUTE :interval "1s" `date +\"%M\"`)
(defpoll SECOND :interval "1s" `date +\"%S\"`)

;;Date vars
(defpoll DAYNAME :interval "1s" `date +\"%a\"`)
(defpoll DAY :interval "1s" `date +\"%d\"`)
(defpoll MONTH :interval "1s" `date +\"%m\"`)


;;Profile vars
(defpoll NAME :interval "5m" `whoami`)
(defvar IMAGE "images/profile.jpeg")
(defpoll UPTIME :interval "1s" `uptime -p | sed -E 's/up //; s/day[s]*,? //; s/hour[s]*,?/h /; s/minute[s]*,?/min/; s/second[s]*,?/sec/'`)


;; Weather vars
(defpoll WEATHER :interval "5m" `scripts/weather.sh`)

;; Spotify vars
(defpoll SONG :interval "1s" `scripts/spotify/spotify-song.sh`)
(defpoll ARTIST :interval "1s" `scripts/spotify/spotify-artist.sh`)
(defpoll COVER :interval "1s" `scripts/spotify/spotify-artwork.sh`)
(defpoll STATUS :interval "1s" `scripts/spotify/spotify-status.sh`)


;; System vars
(defpoll VOLUME :interval "1s" `scripts/system.sh volume`)
(defpoll BRIGHTNESS :interval "1s" `scripts/system.sh brightness`)
(defpoll MIC :interval "1s" `scripts/system.sh mic`)


;; ** Widgets *************************************************************************

;; github
(defwidget github [] 
	(box :class "wid_get_2" :vexpand "false" :hexpand "false" 
		(button :style "background-image: url('images/icons/websites/github.png');" :class "github" :onclick "firefox www.github.com")))
;;youtube
(defwidget youtube [] 
	(box :class "wid_get_2" :vexpand "false" :hexpand "false" 
		(button :style "background-image: url('images/icons/websites/youtube.png');" :class "youtube" :onclick "firefox www.youtube.com")))
;;reddit
(defwidget reddit [] 
	(box :class "wid_get_2" :vexpand "false" :hexpand "false" 
		(button :class "reddit" :style "background-image: url('images/icons/websites/reddit.png');" :onclick "firefox www.reddit.com")))
;;telegram
(defwidget telegram [] 
	(box :class "wid_get_2" :vexpand "false" :hexpand "false" 
		(button :class "telegram" :style "background-image: url('images/icons/websites/telegram.png');"  :onclick "firefox www.telegram.com")))

;; time
(defwidget time [] 
		(box :class "wid_get"
			(box :class "clockbox" :orientation "v" :spacing 0 :valign "center" :halign "start" :space-evenly "false" :vexpand "false" :hexpand "false"
				(label :class "hour" :halign "start" :wrap "true" :limit-width 25 :text HOUR)
				(label :class "minute" :halign "start" :wrap "true" :limit-width 25 :text MINUTE)
                (label :class "second" :halign "start" :wrap "true" :limit-width 25 :text SECOND))))


;; date
(defwidget date [] 
		(box :class "wid_get"
			(box :class "clockbox" :orientation "v" :spacing 0 :valign "center" :halign "start" :space-evenly "false" :vexpand "false" :hexpand "false"
				(label :class "dayname" :halign "start" :wrap "true" :limit-width 25 :text DAYNAME)
				(label :class "day" :halign "start" :wrap "true" :limit-width 25 :text DAY)
                (label :class "month" :halign "start" :wrap "true" :limit-width 25 :text MONTH))))


;; weather
(defwidget weather [] 
		(box :class "wid_get"
			(box :class "clockbox" :orientation "v" :spacing 0 :valign "center" :halign "start" :space-evenly "false" :vexpand "false" :hexpand "false"
				(label :class "dayname" :halign "start" :wrap "true" :limit-width 25 :text DAYNAME)
				(label :class "day" :halign "start" :wrap "true" :limit-width 25 :text DAY)
                (label :class "month" :halign "start" :wrap "true" :limit-width 25 :text MONTH))))


;; profile
(defwidget profile [] 
	(box :class "wid_get" :orientation "v" :spacing 35 :space-evenly "false" :vexpand "false" :hexpand "false"
		(box :style "background-image: url('${IMAGE}');" :class "profileimage" :halign "center")
		(label :class "username" :halign "center" :wrap "true" :limit-width 25 :text NAME)
			(box :orientation "v" :valign "center" :spacing 0 :space-evenly "false" :vexpand "false" :hexpand "false" 
        		(label :class "uptime" :halign "start" :wrap "true" :limit-width 25 :text "󱎫 ${UPTIME}"))))


;; apps
(defwidget apps [] 
	(box :class "wid_get" :orientation "v" :space-evenly "false" :vexpand "false" :hexpand "false" 
		(box :class "appbox" :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false" 
				(button :style "background-image: url('images/icons/apps/files.png');" :class "appicon" :onclick "scripts/apps --vlc")
				(button :style "background-image: url('images/icons/apps/htop.png');" :class "appicon" :onclick "scripts/apps --thunar")
				(button :style "background-image: url('images/icons/apps/terminal.png');" :class "appicon" :onclick "scripts/apps --discord"))
		(box :class "appbox" :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false"
				(button :style "background-image: url('images/icons/apps/discord.png');" :class "appicon" :onclick "scripts/apps --spotify")
				(button :style "background-image: url('images/icons/apps/android-studio.png');" :class "appicon" :onclick "scripts/apps --vscode")
				(button :style "background-image: url('images/icons/apps/obs.png');" :class "appicon" :onclick "scripts/apps --kitty"))
		(box :class "appbox" :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false"
				(button :style "background-image: url('images/icons/apps/torrent.png');" :class "appicon" :onclick "scripts/apps --firefox")
				(button :style "background-image: url('images/icons/apps/notion.png');" :class "appicon" :onclick "scripts/apps --firefox")
				(button :style "background-image: url('images/icons/apps/obsidian.png');" :class "appicon" :onclick "scripts/apps --firefox"))))



;; spotify
(defwidget spotify [] 
	(box :class "wid_get" :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false" 
		(box :class "album_art" :vexpand "false" :hexpand "false" :style "background-image: url('${COVER}');")
		(box :orientation "v" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "false" 
			(label :halign "center" :class "song" :wrap "true" :limit-width 20 :text SONG)
			(label :halign "center" :class "artist" :wrap "true" :limit-width 15 :text ARTIST)
			(box :orientation "h" :spacing 20 :halign "center" :space-evenly "true" :vexpand "false" :hexpand "false" 
				(button :class "btn_prev" :onclick "scripts/spotify/spotify-previous.sh" "󰒮")
				(button :class "btn_play" :onclick "scripts/spotify/spotify-pause.sh" STATUS)
				(button :class "btn_next" :onclick "scripts/spotify/spotify-next.sh" "󰒭")))))

;; system
(defwidget system [] 
	(box :class "wid_get" :vexpand "false" :hexpand "false" 
		(box :orientation "v" :spacing 35 :halign "center" :valign "center" :space-evenly "false" :vexpand "false" :hexpand "false"     
			(box :class "volume_bar" :orientation "h" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "false" 
				(label :class "iconvolume" :text "󰕾")
				(scale :min 0 :max 100 :value VOLUME :onchange "pactl set-sink-volume @DEFAULT_SINK@ {}%" ))
			(box :class "brightness_bar" :orientation "h" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "false" 
				(label :class "iconbrightness" :text "󰃟")
				(scale :min 0 :max 100 :value BRIGHTNESS :onchange "brightnessctl set {}%"))
		  (box :class "mic_bar" :orientation "h" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "false" 
				(label :class "iconmic" :text "󰕾")
				(scale :min 0 :max 100 :value 30 :onchange "pactl set-source-volume 0 {}%" )))))

;; power
(defwidget poweroff [] 
	(box :class "wid_get" :vexpand "false" :hexpand "false" 
		(button :class "poweroff" :style "background-image: url('images/icons/system/shutdown.png');" :onclick "systemctl poweroff" )))

(defwidget sleep [] 
	(box :class "wid_get" :vexpand "false" :hexpand "false" 
		(button :class "sleep" :style "background-image: url('images/icons/system/sleep.png');" :onclick "systemctl suspend")))

(defwidget logout [] 
	(box :class "wid_get" :vexpand "false" :hexpand "false" 
		(button :class "logout" :style "background-image: url('images/icons/system/logout.png');" :onclick "hyprctl dispatch exit")))

(defwidget reboot [] 
	(box :class "wid_get" :vexpand "false" :hexpand "false" 
		(button :class "reboot" :style "background-image: url('images/icons/system/reboot.png');" :onclick "systemctl reboot")))

;; ** Windows *************************************************************************

;; profile
(defwindow profile
           :monitor 0
           :geometry (geometry :x "200px"
                               :y "200px"
                               :width "220px"
                               :height "600px"
                               :anchor "top left")
           :stacking "fg"
           :reserve (struts :distance "80px" :side "top")
           :windowtype "dock"
           :wm-ignore false
(profile))

;; github
(defwindow github
           :monitor 0
           :geometry (geometry :x "500px"
                               :y "200px"
                               :width "120px"
                               :height "120px"
                               :anchor "top left")
           :stacking "fg"
           :reserve (struts :distance "80px" :side "top")
           :windowtype "dock"
           :wm-ignore false
(github))

;; youtube
(defwindow youtube
           :monitor 0
           :geometry (geometry :x "500px"
                               :y "360px"
                               :width "120px"
                               :height "120px"
                               :anchor "top left")
           :stacking "fg"
           :reserve (struts :distance "80px" :side "top")
           :windowtype "dock"
           :wm-ignore false
(youtube))
;; reddit
(defwindow reddit
           :monitor 0
           :geometry (geometry :x "500px"
                               :y "520px"
                               :width "120px"
                               :height "120px"
                               :anchor "top left")
           :stacking "fg"
           :reserve (struts :distance "80px" :side "top")
           :windowtype "dock"
           :wm-ignore false
(reddit))

;; telegram
(defwindow telegram
           :monitor 0
           :geometry (geometry :x "500px"
                               :y "680px"
                               :width "120px"
                               :height "120px"
                               :anchor "top left")
           :stacking "fg"
           :reserve (struts :distance "80px" :side "top")
           :windowtype "dock"
           :wm-ignore false
(telegram))

;; spotify
(defwindow spotify
           :monitor 0
           :geometry (geometry :x "660px"
                               :y "200px"
                               :width "600px"
                               :height "200px"
                               :anchor "top left")
           :stacking "fg"
           :reserve (struts :distance "80px" :side "top")
           :windowtype "dock"
           :wm-ignore false
(spotify))

;; time
(defwindow time
           :monitor 0
           :geometry (geometry :x "660px"
                               :y "520px"
                               :width "120px"
                               :height "280px"
                               :anchor "top left")
           :stacking "fg"
           :reserve (struts :distance "80px" :side "top")
           :windowtype "dock"
           :wm-ignore false
(time))


;; weather
(defwindow weather
           :monitor 0
           :geometry (geometry :x "820px"
                               :y "520px"
                               :width "120px"
                               :height "280px"
                               :anchor "top left")
           :stacking "fg"
           :reserve (struts :distance "80px" :side "top")
           :windowtype "dock"
           :wm-ignore false
(weather))


;; apps
(defwindow apps
           :monitor 0
           :geometry (geometry :x "980px"
                               :y "520px"
                               :width "280px"
                               :height "280px"
                               :anchor "top left")
           :stacking "fg"
           :reserve (struts :distance "80px" :side "top")
           :windowtype "dock"
           :wm-ignore false
(apps))



;; poweroff
(defwindow poweroff
           :monitor 0
           :geometry (geometry :x "1300px"
                               :y "200px"
                               :width "120px"
                               :height "120px"
                               :anchor "top left")
           :stacking "fg"
           :reserve (struts :distance "80px" :side "top")
           :windowtype "dock"
           :wm-ignore false
(poweroff))

;; sleep
(defwindow sleep
           :monitor 0
           :geometry (geometry :x "1300px"
                               :y "360px"
                               :width "120px"
                               :height "120px"
                               :anchor "top left")
           :stacking "fg"
           :reserve (struts :distance "80px" :side "top")
           :windowtype "dock"
           :wm-ignore false
(sleep))
;; logout
(defwindow logout
           :monitor 0
           :geometry (geometry :x "1300px"
                               :y "520px"
                               :width "120px"
                               :height "120px"
                               :anchor "top left")
           :stacking "fg"
           :reserve (struts :distance "80px" :side "top")
           :windowtype "dock"
           :wm-ignore false
(logout))

;; reboot
(defwindow reboot
           :monitor 0
           :geometry (geometry :x "1300px"
                               :y "680px"
                               :width "120px"
                               :height "120px"
                               :anchor "top left")
           :stacking "fg"
           :reserve (struts :distance "80px" :side "top")
           :windowtype "dock"
           :wm-ignore false
(reboot))

;; system
(defwindow system
           :monitor 0
           :geometry (geometry :x "1440px"
                               :y "200px"
                               :width "220px"
                               :height "600px"
                               :anchor "top left")
           :stacking "fg"
           :reserve (struts :distance "80px" :side "top")
           :windowtype "dock"
           :wm-ignore false
(system))





