;; ** Variables ***********************************************************************

;; Time vars
(defpoll HOUR :interval "1s" `date +\"%I\"`)
(defpoll MINUTE :interval "1s" `date +\"%M\"`)
(defpoll SECOND :interval "1s" `date +\"%S\"`)


;; Weather vars
(defpoll WEATHER :interval "5m" `scripts/weather.sh`)

;; Music vars
(defpoll SONG :interval "1s" `scripts/spotify/spotify-song.sh`)
(defpoll ARTIST :interval "1s" `scripts/spotify/spotify-artist.sh`)
(defpoll COVER :interval "1s" `scripts/spotify/spotify-artwork.sh`)
(defpoll STATUS :interval "1s" `scripts/spotify/spotify-status.sh`)


;; Battery vars
(defpoll BATICON :interval "1s" `scripts/battery.sh --icon`)
(defpoll BATPERC :interval "10s" `scripts/battery.sh --perc`)

;; Screen 
(defpoll BRIGHTNESS :interval "1s" `scripts/brightness.sh level`)
(defpoll BRIGHTICON :interval "1s" `scripts/brightness.sh icon`)

;; Audio vars
(defpoll VOLICON :interval "1s" `scripts/volume --icon`)
(defpoll VOLUME :interval "1s" `scripts/volume --get`)
(defpoll MICROPHONE :interval "1s" "scripts/mic.sh")
(defpoll MICICON :interval "1s" "scripts/micicon.sh")

;; Network
(defpoll WIFIICON :interval "10s" `scripts/check-network --icon`)
(defpoll NETSTAT :interval "10s" `scripts/check-network --stat`)

;; User
(defvar IMAGE "images/profile.jpeg")
(defpoll USER :interval "10m" `whoami`)
(defvar OPTIONS "images/options.png")

;; ** Widgets *************************************************************************


;; time
(defwidget time [] 
		(box :class "wid_get"
			(box :class "clockbox" :orientation "v" :spacing 0 :valign "center" :halign "start" :space-evenly "false" :vexpand "false" :hexpand "false"
				(label :class "hour" :halign "start" :wrap "true" :limit-width 25 :text HOUR)
				(label :class "minute" :halign "start" :wrap "true" :limit-width 25 :text MINUTE)
                (label :class "second" :halign "start" :wrap "true" :limit-width 25 :text SECOND))))

;; apps
(defwidget apps [] 
	(box :class "wid_get" :orientation "v" :space-evenly "false" :vexpand "false" :hexpand "false" 
		(box :class "appbox" :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false" 
				(button :style "background-image: url('images/icons/apps/files.png');" :class "appicon" :onclick "scripts/apps --vlc")
				(button :style "background-image: url('images/icons/apps/htop.png');" :class "appicon" :onclick "scripts/apps --thunar")
				(button :style "background-image: url('images/icons/apps/terminal.png');" :class "appicon" :onclick "scripts/apps --discord"))
		(box :class "appbox" :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false"
				(button :style "background-image: url('images/icons/apps/discord.png');" :class "appicon" :onclick "scripts/apps --spotify")
				(button :style "background-image: url('images/icons/apps/android-studio.png');" :class "appicon" :onclick "scripts/apps --vscode")
				(button :style "background-image: url('images/icons/apps/obs.png');" :class "appicon" :onclick "scripts/apps --kitty"))
		(box :class "appbox" :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false"
				(button :style "background-image: url('images/icons/apps/torrent.png');" :class "appicon" :onclick "scripts/apps --firefox")
				(button :style "background-image: url('images/icons/apps/notion.png');" :class "appicon" :onclick "scripts/apps --firefox")
				(button :style "background-image: url('images/icons/apps/obsidian.png');" :class "appicon" :onclick "scripts/apps --firefox"))))

;; Music
(defwidget music [] 
	(box :class "wid_get" :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false" 
		(box :class "album_art" :vexpand "false" :hexpand "false" :style "background-image: url('${COVER}');")
		(box :orientation "v" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "false" 
			(label :halign "center" :class "song" :wrap "true" :limit-width 20 :text SONG)
			(label :halign "center" :class "artist" :wrap "true" :limit-width 15 :text ARTIST)
        (box :orientation "h" :spacing 20 :halign "center" :space-evenly "true" :vexpand "false" :hexpand "false" 
			(button :class "btn-prev" :style "background-image: url('images/icons/music/previous-button.png');" :class "trackbutton" :onclick "scripts/spotify/spotify-previous.sh")
				(button :class "btn_play" :style "background-image: url('${STATUS}');" :class "playbutton" :onclick "scripts/spotify/spotify-pause.sh")
				(button :class "btn_next" :style "background-image: url('images/icons/music/next-button.png');" :class "trackbutton" :onclick "scripts/spotify/spotify-next.sh")))))
           

;; audio
(defwidget audio [] 
		(box :class "wid_get"
			(box :orientation "h" :spacing 16 :valign "center" :halign "center" :space-evenly "false" :vexpand "false" :hexpand "false"

				(button :onclick "scripts/volume --toggle"
					(box :orientation "h" :spacing 8 :valign "center" :halign "center" :space-evenly "false" :vexpand "false" :hexpand "false"
						(box :style "background-image: url('${VOLICON}');" :class "trayicon")
							(label :class "infotext" :halign "start" :text VOLUME)))
				(button :onclick "scripts/mictoggle.sh"
					(box :orientation "h" :spacing 8 :valign "center" :halign "center" :space-evenly "false" :vexpand "false" :hexpand "false"
						(box :style "background-image: url('${MICICON}');" :class "trayicon")
							(label :class "infotext" :halign "start" :text MICROPHONE))))))

;; screen
(defwidget screen [] 
		(box :class "wid_get"
			(box :orientation "h" :spacing 16 :valign "center" :halign "center" :space-evenly "false" :vexpand "false" :hexpand "false"

				(button :onclick "scripts/volume --toggle"
					(box :orientation "h" :spacing 8 :valign "center" :halign "center" :space-evenly "false" :vexpand "false" :hexpand "false"
						(box :style "background-image: url('${BRIGHTICON}');" :class "trayicon")
							(label :class "infotext" :halign "start" :text "${BRIGHTNESS}%")))
				(button :onclick "scripts/widget_apps --pow"
					(box :orientation "h" :spacing 8 :valign "center" :halign "center" :space-evenly "false" :vexpand "false" :hexpand "false"
						(box :style "background-image: url('${BATICON}');" :class "trayicon")
							(label :class "infotext" :halign "start" :text BATPERC))))))


;; profile
(defwidget profile [] 
		(box :class "wid_get"
			(box :orientation "h" :spacing 16 :valign "center" :halign "center" :space-evenly "false" :vexpand "false" :hexpand "false"
				(button :onclick "scripts/widget_apps --nm"
					(box :orientation "h" :spacing 8 :valign "center" :halign "center" :space-evenly "false" :vexpand "false" :hexpand "false"
						(box :style "background-image: url('${WIFIICON}');" :class "trayicon")
							(label :class "infotext" :halign "start" :text NETSTAT)))
				(button :onclick "sidedar/toggle_sidebar"
					(box :orientation "h" :spacing 8 :valign "center" :halign "center" :space-evenly "false" :vexpand "false" :hexpand "false"
						(box :style "background-image: url('${IMAGE}');" :class "face")
							(label :class "infotext" :halign "start" :text USER))))))



;; more
(defwidget more [] 
		(box :class "wid_get"
        	(button :onclick "/home/shtam/.config/eww/dashboard/launch_bar.sh"
			    (box :orientation "h" :spacing 16 :valign "center" :halign "center" :space-evenly "false" :vexpand "false" :hexpand "false"
								(box :style "background-image: url('${OPTIONS}');" :class "face")))))

;; ** Windows *************************************************************************

;; time
(defwindow time
           :monitor 0
           :geometry (geometry :x "500px"
                               :y "1000px"
                               :width "120px"
                               :height "240px"
                               :anchor "top left")
           :stacking "fg"
           :reserve (struts :distance "80px" :side "top")
           :windowtype "dock"
           :wm-ignore false
(time))

;; music
(defwindow music
           :monitor 0
           :geometry (geometry :x "300px"
                               :y "300px"
                               :width "700px"
                               :height "200px"
                               :anchor "top left")
           :stacking "fg"
           :reserve (struts :distance "80px" :side "top")
           :windowtype "dock"
           :wm-ignore false
(music))


;; apps
(defwindow apps
           :monitor 0
           :geometry (geometry :x "900px"
                               :y "600px"
                               :width "230px"
                               :height "240px"
                               :anchor "top left")
           :stacking "fg"
           :reserve (struts :distance "80px" :side "top")
           :windowtype "dock"
           :wm-ignore false
(apps))







;;audio
(defwindow audio
			:monitor 0
			:geometry (geometry :x "1246px"
								:y "500px"
								:width "170px"
								:height "45px"
								:anchor "top left")
           :stacking "fg"
           :reserve (struts :distance "80px" :side "top")
           :windowtype "dock"
           :wm-ignore false
(audio))



;;screen
(defwindow screen
           :monitor 0
           :geometry (geometry :x "1421px"
                               :y "500px"
                               :width "210px"
                               :height "45px"
                               :anchor "top left")
           :stacking "fg"
           :reserve (struts :distance "80px" :side "top")
           :windowtype "dock"
           :wm-ignore false
(screen))

;; profile
(defwindow profile
           :monitor 0
           :geometry (geometry :x "1636px"
                               :y "500px"
                               :width "230px"
                               :height "45px"
                               :anchor "top left")
           :stacking "fg"
           :reserve (struts :distance "80px" :side "top")
           :windowtype "dock"
           :wm-ignore false
(profile))

;;more
(defwindow more
           :monitor 0
           :geometry (geometry :x "1871px"
                               :y "500px"
                               :width "44px"
                               :height "45px"
                               :anchor "top left")
           :stacking "fg"
           :reserve (struts :distance "80px" :side "top")
           :windowtype "dock"
           :wm-ignore false
(more))